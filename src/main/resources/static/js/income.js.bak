document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".openModalBtn").forEach(button => {
        button.onclick = function () {
            const modalType = this.getAttribute("data-modal-type");
            const modalData = this.getAttribute("data-income-name"); // incomeName
            const id = this.getAttribute("data-id"); // idを取得
            let actionPath = `/set`; // フォームの送信先URL
            let modal;

            // モーダルの種類に応じてモーダルテンプレートを選択し、カウントの値を設定
            switch (modalType) {
                case "date":
                    modal = document.getElementById("modalTemplate1").cloneNode(true);
                    modal.querySelector(".modalForm input[name='count']").value = 1;
                    break;
                case "name":
                    modal = document.getElementById("modalTemplate2").cloneNode(true);
                    modal.querySelector(".modalForm input[name='count']").value = 2;
                    break;
                case "count":
                    modal = document.getElementById("modalTemplate3").cloneNode(true);
                    modal.querySelector(".modalForm input[name='count']").value = 3;
                    break;
                default:
                    console.error("Unknown modal type");
                    return; // 不明なタイプのモーダルの場合は処理を終了
            }

            // クローンしたモーダルを表示
            modal.style.display = "block"; 
            modal.style.visibility = "visible"; // visibilityも設定
            modal.style.zIndex = "1000"; // z-indexを設定
            modal.classList.add("active"); // 必要であれば、表示用のクラスを追加

            // モーダルをDOMに追加
            document.body.appendChild(modal);

            // フォームのhiddenフィールドに値を設定
            modal.querySelector(".hiddenModalData").value = modalData; // incomeNameに設定
            modal.querySelector(".modalForm input[name='id']").value = id; // idを設定
            modal.querySelector(".modalForm").action = actionPath; // フォームの送信先URLを設定

            // バリデーションロジック
            function validateForm() {
                let isValid = true;
                const requiredInputs = modal.querySelectorAll(".modalForm input[type='text'], .modalForm input[type='date'], .modalForm input[type='number']");
                requiredInputs.forEach(input => {
                    if (input.value.trim() === "") {
                        isValid = false;
                    }
                });
                return isValid;
            }

            // 初期状態で送信ボタンを無効化
            const submitButton = modal.querySelector(".modalForm input[type='submit']");
            submitButton.disabled = !validateForm();

            // フォームの入力を監視して送信ボタンを有効化
            const inputs = modal.querySelectorAll(".modalForm input");
            inputs.forEach(input => {
                input.addEventListener('input', () => {
                    submitButton.disabled = !validateForm();
                });
            });

            // モーダルを閉じる処理
            modal.querySelector(".close").onclick = function () {
                document.body.removeChild(modal);
            };

            // モーダル外クリックで閉じる処理
            modal.onclick = function (event) {
                if (event.target === modal) {
                    document.body.removeChild(modal);
                }
            };
        };
    });
});
